import Head from "next/head";
import CreatePost from "../components/createPost/CreatePost";
import PostCard from "../components/postCard/PostCard";
import commonStyles from "../styles/Common.module.css";
import {
  PostCategories,
  PostSortingOptions,
  UserAuthStatus,
} from "../interfaces/Common.interface";
import { useDispatch, useSelector } from "react-redux";
import { useEffect, useRef, useState } from "react";
import { append, refresh } from "../features/postSlice";
import { RootState } from "../store";
import { getPosts } from "../services/postServices";
import HomePageNavbar from "../components/homePageNavbar/HomePageNavbar";
import HomePageSidebar from "../components/homePageSidebar/HomePageSidebar";
import useInMobileView from "../hooks/useInMobileView";
import useIntersectionObserver from "../hooks/useIntersectionObserver";
import { MoonLoader } from "react-spinners";

export default function Home() {
  const posts = useSelector((state: RootState) => state.postSlice);
  const { status } = useSelector((state: RootState) => state.userSlice);
  const dispatch = useDispatch();
  const [sortedBy, setSortedBy] = useState<PostSortingOptions>(
    PostSortingOptions.DATE
  );
  const [filterBy, setFilterBy] = useState<PostCategories | null>(null);
  const { inMobileView } = useInMobileView();
  const [currentPage, setCurrentPage] = useState<number>(1);
  const [nextPage, setNextPage] = useState<number | null>(null);
  const lastPostRef = useRef<HTMLDivElement | null>(null);
  const entry = useIntersectionObserver(lastPostRef, {});
  const [isFetchingPosts, setIsFetchingPosts] = useState<boolean>(false);

  useEffect(() => {
    if (entry && entry.isIntersecting) {
      if (nextPage) {
        setCurrentPage((prev) => prev + 1);
      }
    }
  }, [entry?.isIntersecting]);

  useEffect(() => {
    const filter: PostCategories | undefined = filterBy ? filterBy : undefined;
    getPosts(
      sortedBy,
      currentPage,
      filter,
      undefined,
      undefined,
      setIsFetchingPosts,
      (result) => {
        dispatch(refresh({ newPosts: result.data.data.posts }));
        if (result.data.data.paginationData) {
          setCurrentPage(result.data.data.paginationData.currentPage);
          setNextPage(result.data.data.paginationData.nextPage);
        }
      }
    );
  }, []);

  useEffect(() => {
    if (currentPage === 1) return;
    const filter: PostCategories | undefined = filterBy ? filterBy : undefined;
    getPosts(
      sortedBy,
      currentPage,
      filter,
      undefined,
      undefined,
      setIsFetchingPosts,
      (result) => {
        dispatch(append({ newPosts: result.data.data.posts }));
        if (result.data.data.paginationData) {
          setCurrentPage(result.data.data.paginationData.currentPage);
          setNextPage(result.data.data.paginationData.nextPage);
        }
      }
    );
  }, [currentPage]);

  useEffect(() => {
    const filter: PostCategories | undefined = filterBy ? filterBy : undefined;
    getPosts(
      sortedBy,
      1,
      filter,
      undefined,
      undefined,
      setIsFetchingPosts,
      (result) => {
        dispatch(refresh({ newPosts: result.data.data.posts }));
        if (result.data.data.paginationData) {
          setCurrentPage(result.data.data.paginationData.currentPage);
          setNextPage(result.data.data.paginationData.nextPage);
        }
      }
    );
  }, [sortedBy, filterBy]);

  return (
    <>
      <Head>
        <title>Dev Net</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <>
        {inMobileView === false && <HomePageSidebar />}
        <div className={commonStyles.pagePostsSection}>
          {status === UserAuthStatus.AUTHENTICATED && (
            <CreatePost activeSort={sortedBy} activeFilter={filterBy} />
          )}
          <div className={commonStyles.chipContainer}>
            <label
              className={`${commonStyles.chip} ${
                sortedBy === PostSortingOptions.DATE
                  ? commonStyles.chipActive
                  : ""
              }`}
            >
              <input
                defaultChecked
                type="checkbox"
                name="post-sort-by"
                onChange={() => setSortedBy(PostSortingOptions.DATE)}
              />
              date
            </label>

            <label
              className={`${commonStyles.chip} ${
                sortedBy === PostSortingOptions.TRENDING
                  ? commonStyles.chipActive
                  : ""
              }`}
            >
              <input
                type="checkbox"
                name="post-sort-by"
                onChange={() => setSortedBy(PostSortingOptions.TRENDING)}
              />
              trending
            </label>

            <label
              className={`${commonStyles.chip} ${
                filterBy === null ? commonStyles.chipActive : ""
              }`}
            >
              <input
                type="checkbox"
                name="post-filter-by"
                onChange={() => setFilterBy(null)}
              />
              all
            </label>
            <label
              className={`${commonStyles.chip} ${
                filterBy === PostCategories.GENERAL
                  ? commonStyles.chipActive
                  : ""
              }`}
            >
              <input
                type="checkbox"
                name="post-filter-by"
                onChange={() => setFilterBy(PostCategories.GENERAL)}
              />
              {PostCategories.GENERAL}
            </label>
            <label
              className={`${commonStyles.chip} ${
                filterBy === PostCategories.QUERY ? commonStyles.chipActive : ""
              }`}
            >
              <input
                type="checkbox"
                name="post-filter-by"
                onChange={() => setFilterBy(PostCategories.QUERY)}
              />
              {PostCategories.QUERY}
            </label>
          </div>
          <div className={commonStyles.postsContainer}>
            {posts.map((post, index) => (
              <PostCard
                lastPostRef={index === posts.length - 1 ? lastPostRef : null}
                key={post._id}
                details={post}
              />
            ))}
            {(isFetchingPosts || nextPage === null) && (
              <div className={commonStyles.postsEndDataContainer}>
                {isFetchingPosts ? (
                  <MoonLoader size={30} />
                ) : (
                  <p>You have reached the end.</p>
                )}
              </div>
            )}
          </div>
        </div>
        <HomePageNavbar />
      </>
    </>
  );
}
